name: Deploy to Server

on:
  push:
    branches:
      - '**'  # Trigger on all branches

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.check.outputs.should_continue }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2      
      - name: Check if first commit on branch
        id: check
        run: |
          echo "DEBUG: Branch name: ${{ github.ref_name }}"
          COMMITS_ON_BRANCH=$(git rev-list --count HEAD)
          echo "DEBUG: Commits on branch: $COMMITS_ON_BRANCH"
          if [ "$COMMITS_ON_BRANCH" -eq 1 ]; then
            echo "should_continue=false" >> $GITHUB_OUTPUT
            echo "DEBUG: should_continue set to false (first commit on branch)"
          else
            echo "should_continue=true" >> $GITHUB_OUTPUT
            echo "DEBUG: should_continue set to true (not first commit)"
          fi

  build-frontend:
    needs: [precheck]
    if: needs.precheck.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies (webapp)
        working-directory: webapp
        run: npm ci

      - name: Build webapp
        working-directory: webapp
        env:
          NEXT_PUBLIC_REMOTE_BACKEND: ${{ github.ref_name == 'main' && 'https://hk.api.mdlg.dev' || 'https://hk-dev.api.mdlg.dev' }}
        run: npm run build

      - name: List build output directories
        run: ls -la webapp/.next       

      - name: Upload webapp build artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: webapp-build
          path: |
            webapp/.next
            webapp/package.json
            webapp/scripts
            webapp/public

      - name: Install dependencies (websocket-server)
        working-directory: websocket-server
        run: npm ci

  build-backend:
    needs: [precheck]
    if: needs.precheck.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install dependencies (backend)
        working-directory: websocket-server
        run: npm ci

      - name: Build backend
        working-directory: websocket-server
        run: npm run build

      - name: List backend build output directories
        run: ls -la websocket-server/dist

      - name: Upload backend build artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          include-hidden-files: true
          name: backend-build
          path: |
            websocket-server/dist
            websocket-server/package.json
            websocket-server/scripts

  trigger-dockerserver-deploy:
    needs: [precheck, build-frontend, build-backend]
    if: needs.precheck.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set domains based on branch
        id: set-domains
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "DOMAIN=hk.mdlg.dev" >> $GITHUB_ENV
            echo "API_DOMAIN=hk.api.mdlg.dev" >> $GITHUB_ENV
          else
            # All non-main branches use dev domains
            echo "DOMAIN=hk-dev.mdlg.dev" >> $GITHUB_ENV
            echo "API_DOMAIN=hk-dev.api.mdlg.dev" >> $GITHUB_ENV
          fi

      - name: Trigger Docker Server Deployment for Main Domain
        id: trigger_deploy
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.DOCKER_SERVER_ACTIONS_TOKEN }}
          repository: adamd9/docker-server-dev
          event-type: deploy-hk
          client-payload: '{"frontendDomain": "${{ env.DOMAIN }}", "backendDomain": "${{ env.API_DOMAIN }}"}'

      - name: Set deployed output
        id: set_deployed_output
        run: |
          if [ "${{ steps.trigger_deploy.outcome }}" = "success" ]; then
            echo "deployed=true" >> $GITHUB_OUTPUT
          else
            echo "deployed=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  wait-backend-health:
    needs: [precheck, trigger-dockerserver-deploy]
    if: needs.precheck.outputs.should_continue == 'true' && needs.trigger-dockerserver-deploy.outputs.deployed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait 5 minutes for deployment
        run: sleep 300
      - name: Check backend API health
        run: |
          for i in {1..30}; do
            if curl -sSf "https://${{ env.API_DOMAIN }}/public-url"; then
              echo "Backend API is up!"
              exit 0
            fi
            echo "Waiting for backend API..."
            sleep 10
          done
          echo "Backend API did not become available in time."
          exit 1

  wait-frontend-health:
    needs: [precheck, trigger-dockerserver-deploy]
    if: needs.precheck.outputs.should_continue == 'true' && needs.trigger-dockerserver-deploy.outputs.deployed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait 5 minutes for deployment
        run: sleep 300
      - name: Check frontend health
        run: |
          for i in {1..30}; do
            if curl -sSf "https://${{ env.DOMAIN }}/"; then
              echo "Frontend is up!"
              exit 0
            fi
            echo "Waiting for frontend..."
            sleep 10
          done
          echo "Frontend did not become available in time."
          exit 1

          exit 1