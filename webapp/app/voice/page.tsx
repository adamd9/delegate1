'use client';

import { useState, useEffect, useRef } from 'react';
import { getBackendUrl } from '@/lib/get-backend-url';
import { Device } from '@twilio/voice-sdk';

interface LogEntry {
  timestamp: string;
  message: string;
  type: 'info' | 'success' | 'error';
}

export default function VoicePage() {
  const [status, setStatus] = useState('Disconnected');
  const [statusClass, setStatusClass] = useState('disconnected');
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [isInCall, setIsInCall] = useState(false);
  const [backendUrl, setBackendUrl] = useState(getBackendUrl());
  const [logs, setLogs] = useState<LogEntry[]>([]);
  
  const deviceRef = useRef<Device | null>(null);
  const connectionRef = useRef<any>(null);

  const addLog = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => {
      const newLogs = [...prev, { timestamp, message, type }];
      // Keep only last 50 log entries
      return newLogs.slice(-50);
    });
  };

  const updateStatus = (newStatus: string, className: string) => {
    setStatus(newStatus);
    setStatusClass(className);
  };

  const initializeDevice = async () => {
    if (isConnected) {
      await disconnect();
      return;
    }

    try {
      updateStatus('Connecting to Backend...', 'connecting');
      setIsConnecting(true);
      
      addLog(`Requesting access token from: ${backendUrl}`, 'info');
      
      // Request access token from backend
      const response = await fetch(`${backendUrl}/access-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          clientName: `voice-client-${Date.now()}`
        })
      });
      
      if (!response.ok) {
        throw new Error(`Backend responded with status: ${response.status}`);
      }
      
      const data = await response.json();
      addLog(`Backend response: ${data.message}`, 'info');
      
      // Use the token generated by the backend
      const accessToken = data.token;
      
      if (!accessToken) {
        addLog('❌ Backend did not return an access token', 'error');
        addLog('💡 Check backend logs for token generation errors', 'info');
        updateStatus('Token Generation Failed', 'disconnected');
        setIsConnecting(false);
        return;
      }
      
      addLog(`✅ Received fresh access token from backend`, 'success');
      addLog(`🔍 Debug: Token length: ${accessToken.length}`, 'info');
      addLog(`🔍 Debug: Token starts with: ${accessToken.substring(0, 20)}...`, 'info');
      addLog(`🔍 Debug: Client identity: ${data.identity}`, 'info');
      
      addLog('✅ Backend connected! Initializing Twilio Device...', 'success');
      await initializeTwilioDevice(accessToken);
      
    } catch (error: any) {
      addLog(`🔍 Debug: Full error object:`, 'error');
      console.error('Full error:', error);
      addLog(`Backend connection failed: ${error?.message || 'Unknown error'}`, 'error');
      addLog('💡 Make sure your backend is running on the specified URL', 'info');
      updateStatus('Backend Connection Failed', 'disconnected');
      setIsConnecting(false);
    }
  };

  const initializeTwilioDevice = async (accessToken: string) => {
    try {
      addLog('Initializing Twilio Device...', 'info');
      
      const device = new Device(accessToken, {
        logLevel: 1,
        codecPreferences: ['opus' as any, 'pcmu' as any]
      });
      
      device.on('registered', () => {
        addLog('Twilio Device registered successfully', 'success');
        updateStatus('Connected & Ready', 'connected');
        setIsConnected(true);
        setIsConnecting(false);
      });
      
      device.on('error', (error: any) => {
        addLog(`🔍 Debug: Twilio Device error code: ${error.code}`, 'error');
        addLog(`Twilio Device error: ${error.message}`, 'error');
        
        if (error.code === 20101) {
          addLog('🔍 This is an AccessTokenInvalid error', 'error');
          addLog('💡 Try generating a new token: node generate-token.js', 'info');
          addLog('💡 Make sure your Twilio credentials are correct', 'info');
        }
        
        updateStatus('Device Error', 'disconnected');
        setIsConnecting(false);
      });
      
      device.on('incoming', (connection: any) => {
        addLog('Incoming call received', 'info');
        handleIncomingCall(connection);
      });
      
      deviceRef.current = device;
      await device.register();
      
    } catch (error: any) {
      addLog(`Failed to initialize Twilio Device: ${error.message}`, 'error');
      updateStatus('Device Initialization Failed', 'disconnected');
      setIsConnecting(false);
    }
  };

  const startCall = async () => {
    try {
      if (!deviceRef.current) {
        addLog('Device not initialized', 'error');
        return;
      }
      
      addLog('Starting outbound call...', 'info');
      
      // Make a call - for testing, you can call any TwiML app or phone number
      const params = {
        params: {
          To: 'client:test', // Call another Twilio client or use a phone number like '+1234567890'
          From: 'voice-client'
        }
      };
      
      const connection = await deviceRef.current.connect(params);
      connectionRef.current = connection;
      
      connection.on('accept', () => {
        addLog('Call connected successfully', 'success');
        updateStatus('In Call', 'connected');
        setIsInCall(true);
      });
      
      connection.on('disconnect', () => {
        addLog('Call disconnected', 'info');
        updateStatus('Connected & Ready', 'connected');
        setIsInCall(false);
        connectionRef.current = null;
      });
      
      connection.on('error', (error: any) => {
        addLog(`Call error: ${error.message}`, 'error');
        setIsInCall(false);
      });
      
    } catch (error: any) {
      addLog(`Failed to start call: ${error.message}`, 'error');
    }
  };

  const hangUp = () => {
    if (connectionRef.current) {
      addLog('Hanging up call...', 'info');
      connectionRef.current.disconnect();
    }
  };

  const handleIncomingCall = (connection: any) => {
    addLog(`Incoming call from: ${connection.parameters.From}`, 'info');
    
    // Auto-accept incoming calls for testing
    connection.accept();
    connectionRef.current = connection;
    
    updateStatus('In Call (Incoming)', 'connected');
    setIsInCall(true);
    
    connection.on('disconnect', () => {
      addLog('Incoming call disconnected', 'info');
      updateStatus('Connected & Ready', 'connected');
      setIsInCall(false);
      connectionRef.current = null;
    });
  };

  const disconnect = async () => {
    try {
      addLog('Disconnecting...', 'info');
      
      if (connectionRef.current) {
        connectionRef.current.disconnect();
        connectionRef.current = null;
      }
      
      if (deviceRef.current) {
        deviceRef.current.destroy();
        deviceRef.current = null;
      }
      
      setIsConnected(false);
      setIsInCall(false);
      updateStatus('Disconnected', 'disconnected');
      
      addLog('Disconnected successfully', 'success');
      
    } catch (error: any) {
      addLog(`Disconnect error: ${error.message}`, 'error');
    }
  };

  useEffect(() => {
    addLog('Voice client initialized', 'info');
    addLog('💡 Add backend URL and click "Initialize Twilio Device" to connect', 'info');
    
    // Cleanup on unmount
    return () => {
      if (connectionRef.current) {
        connectionRef.current.disconnect();
      }
      if (deviceRef.current) {
        deviceRef.current.destroy();
      }
    };
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white">
      <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 text-center shadow-2xl max-w-md w-full mx-4">
        <h1 className="text-3xl font-bold mb-2">Delegate 1</h1>
        <p className="text-blue-100 mb-8">Voice Client</p>
        
        <div className={`status mb-6 p-4 rounded-xl text-lg font-semibold ${
          statusClass === 'connected' ? 'bg-green-500/20 text-green-100' :
          statusClass === 'connecting' ? 'bg-yellow-500/20 text-yellow-100' :
          'bg-red-500/20 text-red-100'
        }`}>
          {status}
        </div>
        
        <div className="space-y-4 mb-6">
          <input
            type="text"
            value={backendUrl}
            onChange={(e) => setBackendUrl(e.target.value)}
            placeholder="Backend URL (e.g., http://localhost:8081)"
            className="w-full p-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30"
          />
          
          <button
            onClick={initializeDevice}
            disabled={isConnecting}
            className={`w-full p-3 rounded-xl font-semibold transition-all ${
              isConnecting 
                ? 'bg-gray-500/50 cursor-not-allowed' 
                : isConnected
                  ? 'bg-red-500 hover:bg-red-600'
                  : 'bg-blue-500 hover:bg-blue-600'
            }`}
          >
            {isConnecting ? 'Connecting...' : isConnected ? 'Disconnect' : 'Initialize Twilio Device'}
          </button>
          
          <div className="grid grid-cols-2 gap-4">
            <button
              onClick={startCall}
              disabled={!isConnected || isInCall}
              className="p-3 rounded-xl font-semibold bg-green-500 hover:bg-green-600 disabled:bg-gray-500/50 disabled:cursor-not-allowed transition-all"
            >
              Call
            </button>
            
            <button
              onClick={hangUp}
              disabled={!isInCall}
              className="p-3 rounded-xl font-semibold bg-red-500 hover:bg-red-600 disabled:bg-gray-500/50 disabled:cursor-not-allowed transition-all"
            >
              Hang Up
            </button>
          </div>
        </div>
        
        <div className="bg-black/20 rounded-xl p-4 max-h-64 overflow-y-auto">
          <h3 className="text-lg font-semibold mb-3">Logs</h3>
          <div className="space-y-1 text-sm text-left">
            {logs.map((log, index) => (
              <div
                key={index}
                className={`${
                  log.type === 'success' ? 'text-green-300' :
                  log.type === 'error' ? 'text-red-300' :
                  'text-blue-100'
                }`}
              >
                [{log.timestamp}] {log.message}
              </div>
            ))}
            {logs.length === 0 && (
              <div className="text-white/60 italic">No logs yet...</div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
